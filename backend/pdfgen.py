from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

def wrap_text(pdf_canvas, text, max_width):
    """
    Wrap text to fit within the specified max_width.
    """
    lines = []
    current_line = ""
    
    for word in text.split():
        if pdf_canvas.stringWidth(current_line + word, 'Helvetica', 12) < max_width:
            current_line += word + " "
        else:
            lines.append(current_line.strip())
            current_line = word + " "
    
    lines.append(current_line.strip())
    return lines

def create_pdf_report(input_folder, output_file):
    """
    Create a PDF report by reading vulnerability text files from the input_folder
    and writing their contents to the output_file using ReportLab.
    """
    # Create a PDF document
    pdf_canvas = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter

    # Set font and size for the title, then add the title
    pdf_canvas.setFont("Helvetica-Bold", 16)
    title_text = "Report Generated by EasySAST | Ashok Dhungana"
    pdf_canvas.setFillColorRGB(1, 0, 0)  # Red color for title
    pdf_canvas.drawCentredString(width / 2, height - 50, title_text)
    pdf_canvas.setFillColorRGB(0, 0, 0)  # Reset to black for content

    # Set font for body text
    pdf_canvas.setFont("Helvetica", 12)

    # Initialize y-coordinate for content
    y_coordinate = height - 100

    # Get list of all .txt files in the report folder
    txt_files = [f for f in os.listdir(input_folder) if f.endswith(".txt")]
    if not txt_files:
        pdf_canvas.drawString(72, y_coordinate, "No vulnerability report available.")
    else:
        for filename in txt_files:
            file_path = os.path.join(input_folder, filename)
            
            # Write a header for this file's report
            pdf_canvas.setFont("Helvetica-Bold", 14)
            pdf_canvas.drawString(72, y_coordinate, f"Report for {filename}:")
            y_coordinate -= 20
            
            pdf_canvas.setFont("Helvetica", 12)
            with open(file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                wrapped_lines = wrap_text(pdf_canvas, line, width - 144)
                for wline in wrapped_lines:
                    pdf_canvas.drawString(72, y_coordinate, wline)
                    y_coordinate -= 15
                    # Add a new page if there isn't enough space left
                    if y_coordinate < 50:
                        pdf_canvas.showPage()
                        pdf_canvas.setFont("Helvetica", 12)
                        y_coordinate = height - 50
            
            # Draw a separator line after each file's report and add spacing
            pdf_canvas.line(72, y_coordinate, width - 72, y_coordinate)
            y_coordinate -= 30
            if y_coordinate < 50:
                pdf_canvas.showPage()
                pdf_canvas.setFont("Helvetica", 12)
                y_coordinate = height - 50

    pdf_canvas.save()

if __name__ == "__main__":
    input_folder = "Report"
    output_pdf_file = "output.pdf"
    create_pdf_report(input_folder, output_pdf_file)
    print(f"PDF report created successfully: {output_pdf_file}")